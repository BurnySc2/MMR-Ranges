{"version":3,"sources":["components/Header.tsx","components/Statistics.tsx","components/Table.tsx","components/Footer.tsx","components/Page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","state","row_first_item","className","data_header","time","season","season_start","season_end","Component","Statistics","selected","index","props","selected_region","format_table","table","table_formatted","map","row_data","row","entry","index2","selectable_item_class","table_us","this","data","table_eu","table_kr","enabled","onClick","select_region","Table","table_full","Footer","href","target","rel","Page","active","tooltipText","setState","data-tip","data-for","data_mmr","data_avg_games","data_total_games","data_avg_winrate","place","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.100d60d1.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport data_header from \"../data/data_header.json\"\n\ninterface Props {}\ninterface State {}\n\nexport default class Header extends Component<Props, State> {\n    state = {}\n\n    render() {\n        let header_class = \"text-center flex flex-col items-center\"\n        let title_class = \"hover:bg-gray-400 text-4xl\"\n        let header_row_class = \"border-t border-b\"\n\n        let table_class = \"table-fixed\"\n        let row_items = \"px-4 py-2\"\n        let row_first_item = \"bg-gray-700 hover:bg-gray-800 text-white\"\n        let row_second_item = \"bg-gray-100 hover:bg-gray-400\"\n\n        return (\n            <div className={header_class}>\n                <div className={title_class}>{`MMR Ranges - Last update: ${data_header.time}`}</div>\n                <table className={table_class}>\n                    <tr className={header_row_class}>\n                        <td className={`${row_items} ${row_first_item}`}>Season number</td>\n                        <td className={`${row_items} ${row_second_item}`}>{data_header.season}</td>\n                    </tr>\n                    <tr className={header_row_class}>\n                        <td className={`${row_items} ${row_first_item}`}>Season start</td>\n                        <td className={`${row_items} ${row_second_item}`}>\n                            {data_header.season_start}\n                        </td>\n                    </tr>\n                    <tr className={header_row_class}>\n                        <td className={`${row_items} ${row_first_item}`}>Season end</td>\n                        <td className={`${row_items} ${row_second_item}`}>\n                            {data_header.season_end}\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\"\n\ninterface Props {\n    data: { [name: string]: Array<string[]> }\n    enabled: boolean\n    selected_region: number\n    select_region: (index: number) => void\n}\ninterface State {}\n\nexport default class Statistics extends Component<Props, State> {\n    selected = (index: number) => {\n        if (index === this.props.selected_region) {\n            return \"bg-blue-500\"\n        }\n        return \"\"\n    }\n\n    format_table = (table: Array<string[]>) => {\n        let table_class = \"table-fixed\"\n        let table_row_class = \"hover:bg-gray-400\"\n        let table_header_class = \"p-4\"\n        let table_cell_class = \"px-4 py-2 text-center font-semibold border-t-2\"\n\n        let table_formatted = table.map((row_data: string[], index: number) => {\n            let row = row_data.map((entry: string, index2: number) => {\n                if (index === 0) {\n                    return <th className={table_header_class}>{entry}</th>\n                } else {\n                    return <td className={table_cell_class}>{entry}</td>\n                }\n            })\n            return <tr className={table_row_class}>{row}</tr>\n        })\n        return <table className={table_class}>{table_formatted}</table>\n    }\n\n    render() {\n        let selector_row = \"flex flex-row m-2 bg-blue-100 border rounded-lg\"\n        let selectable_item_class = \"px-3 py-1 hover:bg-blue-600 rounded-lg cursor-pointer\"\n\n        let content_class = \"\"\n        let hidden_class = \"hidden\"\n\n        let table_us = this.format_table(this.props.data[\"us\"])\n        let table_eu = this.format_table(this.props.data[\"eu\"])\n        let table_kr = this.format_table(this.props.data[\"kr\"])\n\n        return (\n            <div className={`flex flex-col items-center ${this.props.enabled ? \"\" : \"hidden\"}`}>\n                <div className={selector_row}>\n                    <div\n                        className={`${selectable_item_class} ${this.selected(0)}`}\n                        onClick={() => {\n                            this.props.select_region(0)\n                        }}\n                    >\n                        Americas\n                    </div>\n                    <div\n                        className={`${selectable_item_class} ${this.selected(1)}`}\n                        onClick={() => {\n                            this.props.select_region(1)\n                        }}\n                    >\n                        Europe\n                    </div>\n                    <div\n                        className={`${selectable_item_class} ${this.selected(2)}`}\n                        onClick={() => {\n                            this.props.select_region(2)\n                        }}\n                    >\n                        Korea\n                    </div>\n                </div>\n                <div>\n                    <div\n                        className={`${content_class} ${\n                            this.props.selected_region !== 0 ? hidden_class : null\n                        }`}\n                    >\n                        {table_us}\n                    </div>\n                    <div\n                        className={`${content_class} ${\n                            this.props.selected_region !== 1 ? hidden_class : null\n                        }`}\n                    >\n                        {table_eu}\n                    </div>\n                    <div\n                        className={`${content_class} ${\n                            this.props.selected_region !== 2 ? hidden_class : null\n                        }`}\n                    >\n                        {table_kr}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\"\n\ninterface Props {\n    // Each row has 4 entries: Description (GrandMaster), then entry for US, EU and KR server\n    data: Array<string[]>\n    enabled: boolean\n}\ninterface State {}\n\nexport default class Table extends Component<Props, State> {\n    state = {}\n\n    render() {\n        // console.log(this.props.data)\n        let content_class = \"flex flex-col items-center\"\n        let table_class = \"table-fixed\"\n        let table_row_class = \"hover:bg-gray-400\"\n        let table_header_class = \"p-4\"\n        let table_cell_class = \"px-4 py-2 text-center font-semibold border-t-2\"\n\n        let table = this.props.data.map((row_data: string[], index: number) => {\n            // console.log(index)\n            // console.log(row_data)\n            let row = row_data.map((entry: string, index2: number) => {\n                // console.log(index2)\n                // console.log(entry)\n\n                if (index === 0) {\n                    return <th className={table_header_class}>{entry}</th>\n                } else {\n                    return <td className={table_cell_class}>{entry}</td>\n                }\n            })\n            return <tr className={table_row_class}>{row}</tr>\n        })\n\n        let table_full = <table className={table_class}>{table}</table>\n\n        return (\n            <div className={`${content_class} ${this.props.enabled ? \"\" : \"hidden\"}`}>\n                {table_full}\n            </div>\n        )\n    }\n}\n","import React from \"react\"\n\nexport default function Footer(props: any) {\n    return (\n        <div className={\"flex justify-center\"}>\n            <a\n                className=\"hover:bg-blue-600 bg-blue-200 font-semibold mx-1 py-2 px-4 rounded select-none h-10\"\n                href=\"https://github.com/BurnySc2/MMR-Ranges\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Source code\n            </a>\n        </div>\n    )\n}\n","import React, { Component } from \"react\"\nimport ReactTooltip from \"react-tooltip\"\nimport data_mmr from \"../data/data_mmr_table.json\"\nimport data_avg_games from \"../data/data_avg_games_table.json\"\nimport data_total_games from \"../data/data_total_games_table.json\"\nimport data_avg_winrate from \"../data/data_avg_winrate_table.json\"\nimport Header from \"./Header\"\nimport Statistics from \"./Statistics\"\nimport Table from \"./Table\"\nimport Footer from \"./Footer\"\n\ninterface Props {}\ninterface State {\n    active: number\n    selected_region: number\n    tooltipText: string\n}\n\nexport default class Page extends Component<Props, State> {\n    state = {\n        active: 0,\n        selected_region: 0,\n        tooltipText: \"\",\n    }\n\n    selected = (index: number) => {\n        if (index === this.state.active) {\n            return \"bg-blue-500\"\n        }\n        return \"\"\n    }\n\n    select_region = (index: number) => {\n        this.setState({ selected_region: index })\n    }\n\n    render() {\n        let section_class = \"flex md:flex-row flex-col justify-center text-center items-center\"\n        let topic_class = \"m-2 bg-blue-100 border rounded-lg\"\n        let topic_description_text = \"font-bold\"\n        let selectable_section_class = \"flex flex-row justify-center\"\n        let selectable_item_class = \"px-3 py-1 hover:bg-blue-600 rounded-lg cursor-pointer\"\n\n        return (\n            <div>\n                <div>\n                    {/* header */}\n                    <Header />\n\n                    {/* navbar */}\n                    <div className={section_class}>\n                        <div className={topic_class}>\n                            <div className={topic_description_text}>MMR</div>\n                            <div className={selectable_section_class}>\n                                <div\n                                    className={`${selectable_item_class} ${this.selected(0)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 0 })\n                                    }}\n                                >\n                                    1v1\n                                </div>\n                                <div\n                                    className={`${selectable_item_class} ${this.selected(1)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 1 })\n                                    }}\n                                >\n                                    2v2\n                                </div>\n                                <div\n                                    className={`${selectable_item_class}  ${this.selected(2)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 2 })\n                                    }}\n                                >\n                                    3v3\n                                </div>\n                                <div\n                                    className={`${selectable_item_class}  ${this.selected(3)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 3 })\n                                    }}\n                                >\n                                    4v4\n                                </div>\n                                <div\n                                    className={`${selectable_item_class}  ${this.selected(4)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 4 })\n                                    }}\n                                >\n                                    Archon\n                                </div>\n                            </div>\n                        </div>\n                        <div className={topic_class}>\n                            <div className={topic_description_text}>\n                                Player statistics (this season)\n                            </div>\n                            <div className={selectable_section_class}>\n                                <div\n                                    className={`${selectable_item_class}  ${this.selected(101)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 101 })\n                                    }}\n                                    // Tooltip\n                                    data-tip={\"(total wins + total losses) / player accounts\"}\n                                    data-for=\"globalTooltip\"\n                                >\n                                    Average games\n                                </div>\n                                <div\n                                    className={`${selectable_item_class}  ${this.selected(102)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 102 })\n                                    }}\n                                    // Tooltip\n                                    data-tip={\"total wins + total losses\"}\n                                    data-for=\"globalTooltip\"\n                                >\n                                    Total games\n                                </div>\n                                <div\n                                    className={`${selectable_item_class}  ${this.selected(103)}`}\n                                    onClick={() => {\n                                        this.setState({ active: 103 })\n                                    }}\n                                    // Tooltip\n                                    data-tip={\"total wins / total games\"}\n                                    data-for=\"globalTooltip\"\n                                >\n                                    Average winrate\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {/* Table and stats content */}\n                    <Table data={data_mmr[\"201\"]} enabled={this.state.active === 0} />\n                    <Table data={data_mmr[\"202\"]} enabled={this.state.active === 1} />\n                    <Table data={data_mmr[\"203\"]} enabled={this.state.active === 2} />\n                    <Table data={data_mmr[\"204\"]} enabled={this.state.active === 3} />\n                    <Table data={data_mmr[\"206\"]} enabled={this.state.active === 4} />\n                    <Statistics\n                        data={data_avg_games}\n                        enabled={this.state.active === 101}\n                        selected_region={this.state.selected_region}\n                        select_region={this.select_region}\n                    />\n                    <Statistics\n                        data={data_total_games}\n                        enabled={this.state.active === 102}\n                        selected_region={this.state.selected_region}\n                        select_region={this.select_region}\n                    />\n                    <Statistics\n                        data={data_avg_winrate}\n                        enabled={this.state.active === 103}\n                        selected_region={this.state.selected_region}\n                        select_region={this.select_region}\n                    />\n                    <ReactTooltip place=\"bottom\" id=\"globalTooltip\" />\n                    {/*{this.state.tooltipText}</ReactTooltip>*/}\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n","import React from \"react\"\n// const data_mmr = require(\"./data/data_mmr.json\");\nimport Page from \"./components/Page\"\n\nfunction App() {\n    return <Page />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}